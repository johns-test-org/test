# Updates the Priority field on a Project board when a [Pri] label gets added to an issue.

name: Keep priority labels in sync

# Controls when the workflow will run
on:
  # Triggers the workflow when labels are added to an issue
  issues:
    types:
      - labeled

env:
  LABEL_PREFIX: "[Pri] "
  PROJECT_ID: 1
  PROJECT_FIELD: "Priority"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Updates the Priority field with the appropriate priority level
  check_priority: 
    # if: |
    #   contains(github.event.issue.labels.*.name, '[Pri] TBD') || 
    #   contains(github.event.issue.labels.*.name, '[Pri] Low') || 
    #   contains(github.event.issue.labels.*.name, '[Pri] Normal') ||
    #   contains(github.event.issue.labels.*.name, '[Pri] High') ||
    #   contains(github.event.issue.labels.*.name, '[Pri] BLOCKER')
    if: contains(github.event.label.name, '[Pri]')

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PEM }} 
          #           echo "PRIORITY_LABEL=${label#'$prefix'}" >> "$GITHUB_ENV"

      - name: Get label
        id: get_label
        env:
          PRIORITY_LABEL: ${{github.event.label.name}}
        run: |
          prefix="[Pri] "
          label="${{github.event.label.name}}"
          priority=${label#"$prefix"}
          echo "PRIORITY_LABEL=$priority" >> $GITHUB_ENV
          echo $PRIORITY_LABEL

      # - name: Check if issue is already in "${{ env.BOARD_NAME }}"
      #   id: check_board
      #   env:
      #     BOARD_NAME: "Test Project 2"
      #     OWNER: ${{ github.repository_owner }}
      #     REPO: ${{ github.event.repository.name }}
      #     ISSUE: ${{ github.event.issue.number }}
      #   run: |
      #     if curl -i -H 'Content-Type: application/json' -H "Authorization: bearer ${{ steps.generate_token.outputs.token }}" -X POST -d '{"query": "query($issue: Int!, $owner: String!, $repo: String!) { repository(owner: $owner, name: $repo) { issue(number: $issue) { projectCards { nodes { project { name } } } } } } ", "variables" : "{ \"issue\": '${ISSUE}', \"owner\": \"'${OWNER}'\", \"repo\": \"'${REPO}'\" }" }' https://api.github.com/graphql | grep "\b$BOARD_NAME\b"; then
      #       echo "Issue is already in Project '$BOARD_NAME', cancelling this workflow";
      #       echo "ALREADY_IN_BOARD=true" >> $GITHUB_ENV
      #     else
      #       echo "Issue is not in project '$BOARD_NAME', adding it to $BOARD_NAME."
      #       echo "ALREADY_IN_BOARD=false" >> $GITHUB_ENV
      #     fi

      - name: Read status
        id: read_status
        uses: github/update-project-action@v2
        with:
          github_token: ${{ steps.generate_token.outputs.token }}
          organization: johns-test-org
          project_number: 1
          operation: read
          field: Priority
          content_id: ${{ github.event.issue.node_id }}
          value: ${{ env.PRIORITY_LABEL }}
      - name: Output status
        run: |
          echo "Current status value: ${{ steps.read_status.outputs.field_read_value }}"
#       - name: Update status
#         id: update_status
#         uses: github/update-project-action@v2
#         with:
#           github_token: ${{ steps.generate_token.outputs.token }}
#           organization: johns-test-org
#           project_number: 1
#           content_id: ${{ github.event.issue.node_id }}
#           field: Priority
#           value: High
          
      
