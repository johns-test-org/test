# This is a basic workflow to help you get started with Actions

name: Keep priority labels in sync

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  issues:
    types:
      - labeled

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  check_priority: 
    if: |
      contains(github.event.issue.labels.*.name, '[Pri] TBD') || 
      contains(github.event.issue.labels.*.name, '[Pri] Low') || 
      contains(github.event.issue.labels.*.name, '[Pri] Normal') ||
      contains(github.event.issue.labels.*.name, '[Pri] High') ||
      contains(github.event.issue.labels.*.name, '[Pri] BLOCKER')
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      repository-projects: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3
      
      - name: Get project data
        env:
#           GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: john-legg
          PROJECT_ID: 1
          PRIORITY_FIELD_ID: 52539592
          ISSUE_ID: ${{ github.event.issue.number }}
          PRIORITY_VALUE: Nice
        run: echo Hello, world! $ISSUE_ID
        
#       - name: Set fields
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           gh api graphql -f query='
#             mutation (
#               $project: ID!
#               $item: ID!
#               $status_field: ID!
#               $status_value: String!
#             ) {
#               set_status: updateProjectV2ItemFieldValue(input: {
#                 projectId: $project
#                 itemId: $item
#                 fieldId: $status_field
#                 value: {
#                   singleSelectOptionId: $status_value
#                   }
#               }) {
#                 projectV2Item {
#                   id
#                   }
#               }
              
#             }' -f project=$PROJECT_ID -f item=$ISSUE_ID -f status_field=$PRIORITY_FIELD_ID -f status_value=$PRIORITY_VALUE 
            
      - name: Read status
        id: read_status
        uses: github/update-project-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
#           organization: john-legg
          project_number: 1
          operation: read
          field: 52539592
          content_id: ${{ github.event.client_payload.command.resource.id }}
      - name: Output status
        run: |
          echo "Current status value: ${{ steps.read_status.outputs.field_read_value }}"
#       - name: Update status
#         id: update_status
#         uses: github/update-project-action@v2
#         with:
#           github_token: ${{ secrets.STATUS_UPDATE_TOKEN }}
#           organization: github
#           project_number: 1234
#           content_id: ${{ github.event.client_payload.command.resource.id }}
#           field: Status
#           value: ${{ github.event.client_payload.data.status }}
          
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world! $PRIORITY_FIELD_ID

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      
